---
import { promises as fs } from 'fs';
import path from 'path';

import prefabs from '#prefabs';

import Layout from '#layouts/Layout';
import Breadcrumbs from '#components/Breadcrumbs';
import SnippetCard from '#components/SnippetCard';
import PreviewCardList from '#components/PreviewCardList';

export async function getStaticPaths() {
  const pagePath = path.join(
    process.cwd(),
    '.content',
    'pages',
    '[lang]',
    's',
    '[snippet].json'
  );
  const pageData = await fs.readFile(pagePath, 'utf8').then(JSON.parse);
  return Object.values(pageData);
}

const {
  snippet,
  recommendations,
  breadcrumbs,
  pageDescription,
  structuredData,
} = Astro.props;
---

<Layout
  title={structuredData ? structuredData.name : snippet.title}
  description={pageDescription}
  logoSrc={snippet.cover}
  structuredData={structuredData}
  breadcrumbsData={breadcrumbs}
  canonical={snippet.slug}
  pageType='article'
>
  <Breadcrumbs breadcrumbs={breadcrumbs} />
  <SnippetCard snippet={snippet} />
  <div class='g-c3'>
    <h2 class={prefabs.recommendationsTitle}>More like this</h2>
    <PreviewCardList contentItems={recommendations} />
  </div>
  <script is:inline>
    const copyCodeBlock = e => {
      if (!e.target.matches('.action-btn.icon-clipboard')) return;
      const code = e.target.parentNode.querySelector('pre').innerText;
      try {
        navigator.clipboard.writeText(code);
        setTimeout(() => {
          e.target.classList.remove('icon-clipboard');
          e.target.classList.add('active');
          e.target.classList.add('icon-check');
        }, 100);
        setTimeout(() => {
          e.target.classList.remove('icon-check');
          e.target.classList.remove('active');
          e.target.classList.add('icon-clipboard');
        }, 750);
      } catch (err) {
        console.error('Failed to copy: ', err);
      }
    };

    document.addEventListener('click', copyCodeBlock);
  </script>
</Layout>
